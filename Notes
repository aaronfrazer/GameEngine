Want to add:

More functionality for all cameras
	- Make the camera an entity that can be seen
	- Toggle camera entity on/off

Create a BirdsEyeCamera class	
	
More functionality to the FreeRoamCamera
	- Ability to move where the camera is facing
	- Ability to have the camera zoom in/out

Terrain rendering
    - Terrain should be rendered when a player can see it

Mouse picking
    - When switching cameras, the mousepicker needs to reset for where the mouse is
    - Add an entity editor where you can pick up and place entities around the world by clicking the mouse
    - Save worlds so that they can be used for later

---

Need to take into consideration when creating world:
Entities - texture, shape, reflectivity
Players - same as entities
Lighting - specular, diffuse
Terrain - texture, reflectivity, size
Cameras - 1st, 3rd, freeroam

---

Skybox settings:
Goal is to implement a setting to where I can set the day/night skyboxes with variables.
Variables:
skyboxDayTime - indicates length of day time, float value in ms
skyboxNightTime - indicates length of night time, float value in ms
skyboxTransition - indicates length of time to switch skyboxes

---

Clock:
The clock will shall have a timer.
The timer will go up to 24 seconds.  After 24 seconds is over, the timer resets.
1 real life min = 1 game hr
24 real life mins = 24 game hrs

Right now:
1 game hr = 3.6 secs

Want it to be:
1 game hr = 1 min

Calculation:
60 / 3.6 = 16.6667

Test Case for Hours game (hours) vs real (seconds):
1 hr = 24 secs
2 = 48

---

Clipping Planes:

Equation of a Plane
Ax + By + Cz + D = 0
(A, B, C) = plane's normal
D = signed distance from origin

We will always do horizontal planes for water reflection/refraction
(A, B, C) = (0, 1, 0) pointing upwards (culls everything under height D)
or
(A, B, C) = (0, -1, 0) pointing downwards (culls everything above height D)

---

Normal Mapping:

Not going to implement normal mapping with current system.
Instead, we are going to create a new rendering system just for normal mapped entities.
This way you can choose which rendering system you want to use:
1. Entities
2. Entities rendered with normal maps
These will be in the two new packages: normalMappingObjConverter and normalMappingRenderer

---

skyColour variable is not being loaded into waterFragmentShader.glsl

---

Font Rendering:

In order to render font we need two things:
1. Font's texture atlas - contains all characters
2. Font file - contains information about each character in the texture atlas (size, position, coordinates)

Use "Hiero" jar to create your own files.

---

It's also a good idea to delete the text's VAO and
related VBOs from memory if the text is never going
to be used again

You just need to remove the vao from the list in
the Loader class and delete the VAO and VBO.
If you have a look in the Loader class you'll find
the OpenGL methods needed to delete VAOs and VBOs
GL30.glDeleteVertexArrays(vao);
GL15.glDeleteBuffers(vbo);