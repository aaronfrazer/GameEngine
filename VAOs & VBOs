Tutorial 2: VAOs and VBOs
Vertex Array Object (VAO) - object that stores data about a 3D model
Contains slots that store data called attribute lists

Example VAO:
------------------------------------
0 	| Vertext Positions
------------------------------------
1 	| Vertex Colors
------------------------------------
2 	| Normal Vectors
------------------------------------
3 	| Texture Coords
------------------------------------
4 	| ...
------------------------------------
... |
------------------------------------
15 	|
------------------------------------

Vertex Buffer Object (VBO) - data
Contains an array of numbers.
Each VBO can be put into an attribute list in a VAO.

Example VAO:
------------------------------------
0 	| VBO 1
------------------------------------
1 	| VBO 2
------------------------------------
2 	| VBO 3
------------------------------------
3 	| ...
------------------------------------
4 	| ...
------------------------------------
... |
------------------------------------
15 	| ...
------------------------------------

VAOs are stored in memory via IDs.

Every model has a load of data that is stored in a VAO
Every model is composed of triangles.

Tutorial 3: Rendering with Index Buffers
Index Buffer - a VBO that tells OpenGL the order to connect vertices
Index buffers allow us to render quads using less vertices

Tutorial 4: Introduction to Shaders
Shaders run on the GPU

Two types of shaders:
Vertex Shader - executes one time per vertex in the object being rendered
Uses the vertex data stored in the object's VAO as the input to the vertex shader program
Fragment Shader - executes one time per pixel
Uses the output of the vertex shader to calculate what the final color for the pixel should be

Tutorial 7: Matrices & Uniform Variables
2 things to do in the Java code when it comes to manageing uniform variables:
1. When we load up shaders, we need to get all of the locations of the uniform variables in the shader code to store them.
2. Need methods that can be called to load values from program to these locations of the uniform variables in the shader code.

An object's transformation consists of three factors:
Translation (x y z)
Rotation (rx ry rz)
Scale (S)

We can also use 4x4 matrix










































